" set nocompatible
" filetype off
"
" "NeoBundle Scripts-----------------------------
" if has('vim_starting')
"   if &compatible
"     set nocompatible               " Be iMproved
"   endif
"
"   " Required:
"   set runtimepath+=$HOME/.vim/bundle/neobundle.vim/
" endif
"
" " Required:
" call neobundle#begin(expand('$HOME/.vim/bundle'))
"
" " Let NeoBundle manage NeoBundle
" " Required:
" NeoBundleFetch 'Shougo/neobundle.vim'
"
" source $HOME/.vim/bundlerc.vim
"
" " Required:
" call neobundle#end()
"
" " Required:
" filetype plugin indent on
"
" " If there are uninstalled bundles found on startup,
" " this will conveniently prompt you to install them.
" NeoBundleCheck
" "End NeoBundle Scripts-------------------------
"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/dein/repos/github.com/Shougo/dein.vim

" Required:
call dein#begin(expand('~/.vim/dein'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')

source $HOME/.vim/bundlerc.vim

" Required:
call dein#end()

" Required:
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
 call dein#install()
endif

"End dein Scripts-------------------------

" source $HOME/.vim/bundlerc.vim
"
set grepprg="grep -nH $*"

let mapleader=","
let maplocalleader=','

runtime! vimrc.d/**.vim
runtime! vimrc.local.d/**.vim

" basic
set number
set ruler
set lbr
set laststatus=2
set hidden
set modeline
" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set foldmethod=indent

" tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:→\ ,trail:·

" search
set incsearch
set hlsearch
set ignorecase
set smartcase

" split
set splitright

set showcmd

" command-t
set wildignore+=*.zip,*.gz,*.bz2,*.xz,*.class
let g:ctrlp_custom_ignore = '\v[\/](\.(git|hg|svn)|(vendor\/ruby|tmp|log|node_modules|bower_components))$'

" syntax
autocmd BufEnter *.thtml,*.ctp set syntax=php
autocmd BufEnter *.js.ctp set syntax=javascript
autocmd BufEnter *.eco set filetype=eco

au BufRead,BufNewFile {Gemfile,Rakefile,Thorfile,config.ru,Guardfile,*.rb} set ft=ruby
au BufRead,BufNewFile {*.yml} set ft=yaml

" make and python use real tabs
au FileType make set noexpandtab

" define quotes used by latex suite
let b:Tex_SmartQuoteOpen = '"`'
let b:Tex_SmartQuoteClose = "\"'"

" mappings
nmap <Tab> :bn<CR>
map <S-Tab> :bp<CR>
nmap n nzz
nmap N Nzz

noremap <c-o> :!open %<cr>

noremap <C-c> :BD<CR>

noremap <leader>c :CoffeeCompile vert<CR>

map <leader>a :A<cr>

noremap <leader>r :!bundle exec rspec %<cr>
nmap <leader>R :!bundle exec rspec spec<CR>


" Tabularize

vmap gt        :Tabularize /
vmap gt=       :Tabularize /=<cr>
vmap gt&       :Tabularize /&<cr>
vmap gt.       :Tabularize /.<cr>
vmap gt:       :Tabularize /:<cr>
vmap gt,       :Tabularize /,<cr>
vmap gt;       :Tabularize /;<cr>
vmap gt<space> :Tabularize / <cr>

" Buffers
map gl :ls<cr>

" show highlighting group under cursor when pressing F10
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" CTRLP
noremap <c-b> :CtrlPBuffer<cr>

"convenience
noremap <leader><cr> :nohlsearch<cr>

" markdown
noremap <leader>m :QuickRun markdown<cr>

set mouse=a
set backup
set undofile                "so is persistent undo ...
set undodir=$HOME/.vim/undo//
set undolevels=1000         "maximum number of changes that can be undone
set undoreload=10000        "maximum number lines to save for undo on a buffer reload
set backupdir=$HOME/.vim/backup//
set directory=$HOME/.vim/swap//
set viewdir=$HOME/.vim/views//

silent execute '!mkdir -p $HOME/.vim/backup'
silent execute '!mkdir -p $HOME/.vim/swap'
silent execute '!mkdir -p $HOME/.vim/views'
silent execute '!mkdir -p $HOME/.vim/undo'
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview

let g:neocomplete#enable_at_startup = 1

hi IndentGuidesOdd ctermbg=255 guibg=white
hi IndentGuidesEven ctermbg=254 guibg=lightgrey
hi Normal ctermbg=15

" FUGITIVE commands
command! Gci Gcommit --verbose
command! Gds Git diff --staged
command! Gca Gcommit --amend

map <leader>' :s/'/"/g 100000<cr>
" END VIM RSPEC & CUCUMBER

" For snippet_complete marker.
if has('conceal')
  set conceallevel=1 concealcursor=i
endif

let g:SuperTabDefaultCompletionType = "<c-n>"

" rainbow paranthesis
let g:rainbow_active = 1

let g:rainbow_conf = {
\   'ctermfgs': ['darkblue', 'darkyellow', 'darkcyan', 'darkmagenta'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'tex': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\       },
\       'lisp': {
\           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\       },
\       'vim': {
\           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\       },
\       'html': 0,
\       'css': 0,
\   }
\}


" clojure
nmap cx :Eval<cr>

" text editing
au BufEnter *.md,*.markdown,*.txt,*.tex,*.latex set textwidth=100
au BufEnter *.md,*.markdown,*.txt,*.tex,*.latex set spelllang=de
au BufEnter *.md,*.markdown,*.txt,*.tex,*.latex set spell

" gradle == groovy
au BufEnter *.gradle set ft=groovy

" enable conceal in normal and command mode
set concealcursor=nc
set conceallevel=1
let g:tex_conceal=""

" emmet-vim mapping
nmap <leader>h <c-y>,
imap <c-z>, <c-y>,

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" disable parent dir search for rope
let g:pymode_rope_lookup_project = 0

" pymode python
" let g:pymode_python = 'python3'

au Syntax gitcommit set foldmethod=manual
au Syntax gitcommit set spell
au Syntax gitcommit set spelllang=en
au Syntax gitcommit set colorcolumn=72
au FileType agit_diff set foldmethod=diff

let g:quickrun_config = {
\   'markdown': {
\     'type': 'markdown/gfm',
\     'outputter': 'browser'
\   }
\ }

let g:airline_powerline_fonts = 1
let g:airline#extensions#bufferline#overwrite_variables = 0
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:bufferline_rotate = 1
let g:bufferline_fixed_index = -1
let g:bufferline_active_buffer_left = '['
let g:bufferline_active_buffer_right = ']'
let g:bufferline_modified = '+'
let g:bufferline_show_bufnr = 1
let g:bufferline_echo = 0
let g:airline#extensions#branch#displayed_head_limit = 25
let g:airline#extensions#branch#format = 2
let g:airline_skip_empty_sections = 1

let g:airline#extensions#default#section_truncate_width = {
  \ 'b': 120,
  \ 'x': 100,
  \ 'y': 100,
  \ 'z': 45,
  \ 'warning': 79,
  \ }

" syntastic
let g:syntastic_coffee_checkers = ['coffee', 'coffeelint']
let g:syntastic_javascript_checkers = ['jshint', 'eslint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_filetype_map = { 'html.handlebars': 'handlebars' }
"let g:syntastic_javscript_eslint_exec = '/Users/ohcibi/.nvm/versions/node/v0.12.7/bin/eslint'

function! RemoveC()
  let r = confirm('Really Remove?', "&OK\n&Cancel")
  if r == 1
    execute "Remove"
  endif
endfunction

map gr :call RemoveC()<cr>

hi diffRemoved ctermfg=magenta cterm=bold
hi diffAdded ctermfg=darkgreen cterm=bold
set path=.,**
set wildmenu

set colorcolumn=100
